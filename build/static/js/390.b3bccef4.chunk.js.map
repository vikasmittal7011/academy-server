{"version":3,"file":"static/js/390.b3bccef4.chunk.js","mappings":"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","sources":["constant/index.js","components/register/OTPForm.js","components/register/RegisterForm.js","pages/Register.js"],"sourcesContent":["export const scrollToTop = () => {\r\n    window.scrollTo(0, 0);\r\n}\r\n\r\nexport const inputClass = \"border-2 border-blue-400 focus:outline-blue-800 rounded-md w-full py-2 px-2 font-normal mt-2 text-lg\";\r\n\r\nexport const labelClass = \"font-bold text-gray-700 text-lg flex-1\";\r\n","import { useForm } from \"react-hook-form\"\r\nimport { ClipLoader } from \"react-spinners\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nimport { inputClass, labelClass, scrollToTop } from \"../../constant\"\r\nimport { registerUserAync, retypeData, selectauth } from \"../../features/auth/authSlice\"\r\n\r\nconst OTPForm = () => {\r\n\r\n    const { userData, status } = useSelector(selectauth);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => {\r\n        scrollToTop();\r\n        dispatch(retypeData());\r\n    }\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onSubmit = handleSubmit(async (data) => {\r\n        dispatch(registerUserAync({ ...userData, ...data }));\r\n    })\r\n\r\n    return (\r\n        <form className=\"flex flex-col gap-5\" onSubmit={onSubmit}>\r\n            <h2 className=\"text-3xl font-bold\">Verify OTP</h2>\r\n            <label className={labelClass}>Enter OTP\r\n                <input {...register(\"otp\", { required: \"Pleace Enter First Name...\", minLength: { value: 6, message: \"OTP Should be 6 Digit\" }, maxLength: { value: 6, message: \"OTP Should be 6 Digit\" } })} className={inputClass} />\r\n                {errors.otp && <span className=\"text-red-500\">{errors.otp.message}</span>}\r\n            </label>\r\n\r\n            <div className=\"flex flex-col md:flex-row justify-between md:items-center gap-5\">\r\n                <span onClick={handleClick} className=\"cursor-pointer underline text-blue-600 hover:text-cyan-800\">Enter Email Again</span>\r\n                <button type=\"submit\" className={`outline-none bg-blue-700 text-white p-2 px-4 rounded-md font-bold text-xl hover:bg-blue-500 transition-all ${status === \"loading\" ? \"cursor-not-allowed\" : \"cursor-pointer\"} flex justify-center items-center gap-2`}>\r\n                    <ClipLoader size={20} color=\"white\" loading={status === \"loading\"} />\r\n                    <div>Verify OTP</div>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default OTPForm\r\n","import { useEffect } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { ClipLoader } from \"react-spinners\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nimport { inputClass, labelClass, scrollToTop } from \"../../constant\"\r\nimport { generateOTPAync, selectauth } from \"../../features/auth/authSlice\"\r\n\r\nconst RegisterForm = () => {\r\n\r\n    const { sendOTP, userData, status } = useSelector(selectauth)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        formState: { errors },\r\n        setValue\r\n    } = useForm()\r\n\r\n    const onSubmit = handleSubmit(async (data) => {\r\n        dispatch(generateOTPAync(data))\r\n    })\r\n\r\n    useEffect(() => {\r\n        setValue(\"firstName\", userData.firstName)\r\n        setValue(\"lastName\", userData.lastName)\r\n        setValue(\"email\", userData.email)\r\n        setValue(\"password\", userData.password)\r\n        setValue(\"confirmPassword\", userData.confirmPassword)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [sendOTP]);\r\n\r\n    return (\r\n        <form className=\"flex flex-col gap-5 w-full\" onSubmit={onSubmit}>\r\n            <h2 className=\"text-3xl font-bold\">Create An Account</h2>\r\n\r\n            <div className=\"flex flex-col md:flex-row gap-5\">\r\n                <label className={labelClass}>First Name\r\n                    <input {...register(\"firstName\", { required: \"Pleace Enter First Name...\" })} className={inputClass} />\r\n                    {errors.firstName && <span className=\"text-red-500\">{errors.firstName.message}</span>}\r\n                </label>\r\n\r\n                <label className={labelClass}>Last Name\r\n                    <input {...register(\"lastName\", { required: \"Pleace Enter Last Name...\" })} className={inputClass} />\r\n                    {errors.lastName && <span className=\"text-red-500\">{errors.lastName.message}</span>}\r\n                </label>\r\n            </div>\r\n\r\n            <label className={labelClass}>Email\r\n                <input type=\"email\" {...register(\"email\", {\r\n                    required: \"Pleace Enter Email...\", pattern: {\r\n                        value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}(?:\\.[a-zA-Z]{2,})?$/,\r\n                        message: \"Please enter a valid email address.\"\r\n                    }\r\n                })} className={inputClass} />\r\n                {errors.email && <span className=\"text-red-500\">{errors.email.message}</span>}\r\n            </label>\r\n\r\n            <label className={labelClass}>Password\r\n                <input type=\"password\" {...register(\"password\", {\r\n                    required: \"Pleace Enter Password...\", minLength: { value: 8, message: \"Password Must Be 8 Char Long\" }, pattern: {\r\n                        value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$/,\r\n                        message: \"Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character (!@#$%^&*)\"\r\n                    }\r\n                })} className={inputClass} />\r\n                {errors.password && <span className=\"text-red-500\">{errors.password.message}</span>}\r\n            </label>\r\n\r\n            <label className={labelClass}>Confirm Password\r\n                <input type=\"password\" {...register(\"confirmPassword\", { validate: (val) => { if (!val) { return \"Place Same Password...\" } else if (watch(\"password\") !== val) { return \"Your password dose not match\" } } })} className={inputClass} />\r\n                {errors.confirmPassword && <span className=\"text-red-500\">{errors.confirmPassword.message}</span>}\r\n            </label>\r\n\r\n            <div className=\"flex flex-col md:flex-row justify-between md:items-center gap-5\">\r\n                <span className=\"flex gap-1\">\r\n                    Already have an account?\r\n                    <Link onClick={scrollToTop} to=\"/login\" className=\"outline-none underline text-blue-600 transition-all hover:text-cyan-800\">\r\n                        Login!\r\n                    </Link>\r\n                </span>\r\n                <button type=\"submit\" className={`bg-blue-700 outline-none text-white p-2 px-4 rounded-md font-bold text-xl hover:bg-blue-500 transition-all ${status === \"loading\" ? \"cursor-not-allowed\" : \"cursor-pointer\"} flex justify-center items-center gap-2`}>\r\n                    <ClipLoader size={20} color=\"white\" loading={status === \"loading\"} />\r\n                    <div>Create Account</div>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Toast from \"../components/common/Toast\";\r\nimport OTPForm from \"../components/register/OTPForm\";\r\nimport RegisterForm from \"../components/register/RegisterForm\";\r\nimport { clearMessage, out, selectauth } from \"../features/auth/authSlice\";\r\n\r\nconst Register = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { sendOTP, registerSuccess, status, message } = useSelector(selectauth);\r\n\r\n    useEffect(() => {\r\n        if (registerSuccess) {\r\n            dispatch(out());\r\n            return navigate(\"/\");\r\n        }\r\n    }, [registerSuccess, navigate, dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Toast type={status === \"failed\" ? \"error\" : \"success\"} message={message} clearMessage={clearMessage} />\r\n            {\r\n                !sendOTP ?\r\n                    <RegisterForm />\r\n                    :\r\n                    <OTPForm />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register\r\n"],"names":["scrollToTop","window","scrollTo","inputClass","labelClass","OTPForm","userData","status","useSelector","selectauth","dispatch","useDispatch","register","handleSubmit","formState","errors","useForm","onSubmit","async","registerUserAync","data","_jsxs","className","children","_jsx","required","minLength","value","message","maxLength","otp","onClick","handleClick","retypeData","type","concat","ClipLoader","size","color","loading","RegisterForm","sendOTP","watch","setValue","generateOTPAync","useEffect","firstName","lastName","email","password","confirmPassword","pattern","validate","val","Link","to","Register","navigate","useNavigate","registerSuccess","out","_Fragment","Toast","clearMessage"],"sourceRoot":""}